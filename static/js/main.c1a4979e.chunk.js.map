{"version":3,"sources":["Dice/Dice-0.svg","Dice/Dice-1.svg","Dice/Dice-2-b.svg","Dice/Dice-3-b.svg","Dice/Dice-4.svg","Dice/Dice-5-b.svg","Dice/Dice-6-b.svg","common.js","Dice/Dice.js","Game/GameComponents.js","Game/Game.js","Simulator/SimActionBar.js","Simulator/SimForm.js","Simulator/SimResult.js","Simulator/Sim.js","Simulator/Simulator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomIntInclusive","min","max","Math","ceil","floor","random","Dice","props","size","diceList","d0","d1","d2","d3","d4","d5","d6","i","value","src","alt","style","width","GameView","inProgress","gameOver","hasWon","winSum","winAmount","isAdd","plusOrMinus","addClassName","classNames","className","onClick","onRoll","color","StreakContainer","history","streak","length","showWinnerMsg","showLoserMsg","roll","aria-label","map","val","key","PlayActionBar","disabled","onTakeHome","onNew","cleanState","round","diceValue","takeHome","Game","handleRoll","isGameOver","console","info","rollDice","state","concat","setState","handleNew","newGame","handleTakeHome","this","reduce","a","b","Component","SimActionBar","running","paused","completed","stopButton","onStop","newButton","playPauseClasses","onPlay","SimForm","simAmount","activeStrat","stratAVal","stratBVal","onSelectChange","onRadioChange","onValueChange","onChange","n","text","amount","type","name","checked","SimResult","roundedAvgStreak","roundedAvgWinnings","stratValue","avgStreak","avgWinnings","bestStreak","bestWinnings","toFixed","chosenStrats","stratA","stratB","PigletGame","money_bag","winningStreak","over","Error","winnings","StratOnRollCount","count","game","result","StratOnWinnings","Sim","strategy","onUpdate","reset","timer","setInterval","counter","_runUpdate","_runComplete","play","totalWinnings","totalStreaks","_setBestResults","best","clearInterval","avgStreaks","_setAvgResults","avg","SimProgress","classes","Simulator","onSimUpdate","progressValue","handlePlayPause","simulation","chosenStrategy","strategyOptions","pause","run","handleStop","stop","_setNewSim","handleAmountSelect","e","target","handleStratSelect","handleStratValChange","abs","simForm","simResult","Explain","class","href","TabNav","tabs","activeIndex","isActive","onTabClick","bind","App","handleTabClick","tabIndex","page","renderTabPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1a4979e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dice-0.e1a84b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-1.1192cb54.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-2-b.cb855bd3.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-3-b.6e06b439.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-4.5f9fb5bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-5-b.be6d963e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dice-6-b.9b3f333a.svg\";","function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  //The maximum and the minimum are inclusive \n  return Math.floor(Math.random() * (max - min + 1)) + min; \n}\n\nfunction sum(listOfNums) {\n  const result = listOfNums.reduce((a, b) => a + b, 0);\n  return result;\n}\n\nexport { getRandomIntInclusive, sum };","// https://create-react-app.dev/docs/importing-a-component\nimport React from 'react';\n// https://create-react-app.dev/docs/adding-images-fonts-and-files\n// import { ReactComponent as Dice1 } from './Dice-1.svg';\nimport d0 from './Dice-0.svg';\nimport d1 from './Dice-1.svg';\nimport d2 from './Dice-2-b.svg';\nimport d3 from './Dice-3-b.svg';\nimport d4 from './Dice-4.svg';\nimport d5 from './Dice-5-b.svg';\nimport d6 from './Dice-6-b.svg';\n\n// TODO: shaky animation\nfunction Dice(props) {\n  const size = props.size || 64;\n  const diceList = [d0, d1, d2, d3, d4, d5, d6];\n  const i = props.value;\n  return <img src={diceList[i]} alt={`Dice ${i}`} style={{ width: size }} />\n}\n\nexport default Dice;","import React from 'react';\nimport Dice from '../Dice/Dice';\nimport classNames from 'classnames';\n\nfunction GameView(props) {\n  const { \n    value,\n    inProgress,\n    gameOver,\n    hasWon,\n    winSum,\n  } = props;\n  const winAmount = !hasWon && gameOver ? 0 : winSum;\n  const isAdd = value > 1;\n  const plusOrMinus = isAdd ? `+${value}` : `-${winSum-1}`;\n  const addClassName = classNames({\n    'ps-dice-addition': true,\n    'is-invisible': !inProgress,\n    'has-text-success': isAdd,\n    'has-text-danger': !isAdd,\n  });\n\n  return (\n    <div className=\"ps-container ps-space-evenly has-text-centered\">\n      <div>\n        <h3 className={addClassName}>{plusOrMinus}</h3>\n        <div onClick={props.onRoll}>\n          <Dice value={value} />\n        </div>\n      </div>\n      <div>\n        <h3 className=\"is-size-5 has-text-weight-semibold\">Winnings</h3>\n        <p className=\"ps-win-amount\" style={{color: winAmount ? '#f1c000' : '#A7A7A8'}}>\n          ${winAmount}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction StreakContainer(props) {\n  const {\n     history,\n     winSum,\n     hasWon,\n     gameOver,\n  } = props;\n\n  const streak = gameOver ? history.length-1 : history.length;\n  const showWinnerMsg = classNames({'is-hidden': !hasWon});\n  const showLoserMsg = classNames({'is-hidden': !gameOver});\n  \n  return (\n    <div className=\"ps-streak-container has-text-centered\">\n      <p className={showWinnerMsg}>\n        Congrats! <span roll=\"img\" aria-label=\"confetti ball\">&#x1F38A;</span>&nbsp;\n        You've won <span roll=\"img\" aria-label=\"Money bag\">&#x1F4B0;</span>{winSum}\n      </p>\n      <p className={showLoserMsg}>\n        Oh no! <span roll=\"img\" aria-label=\"see-no-evil monkey\">&#x1F648;</span>&nbsp;\n        <br/>\n        You've lost the potential <span className=\"has-text-danger\">${winSum-1}</span> winnings.\n      </p>\n      <p>Streak: {streak}</p>\n      <div className=\"ps-sm-dice-container\">\n        {history.map((val, i) => {\n          return (\n            <span key={i} className=\"ps-small-dice\">\n              <Dice value={val} size={24} />\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction PlayActionBar(props) {\n  const { gameOver, inProgress, hasWon } = props;\n\n  return (\n    <div className=\"ps-container ps-center ps-action-bar\">\n      <div className=\"buttons ps-buttons-box\">\n          <button className=\"button is-success\" disabled={gameOver || hasWon} onClick={props.onRoll}>\n            <span roll=\"img\" aria-label=\"Dice\">&#x1F3B2;</span>&nbsp;Roll\n          </button>\n          <button className=\"button is-warning\" disabled={gameOver || hasWon || !inProgress} onClick={props.onTakeHome}>\n            <span roll=\"img\" aria-label=\"Money bag\">&#x1F4B0;</span>&nbsp;Take Home\n          </button>\n          <button className=\"button is-light\" disabled={!inProgress} onClick={props.onNew}>\n            <span roll=\"img\" aria-label=\"Restart\">&#x1F504;</span>&nbsp;New\n          </button>\n      </div>\n    </div>\n  );\n}\n\nexport {\n  GameView,\n  StreakContainer,\n  PlayActionBar\n};","import React, { Component } from 'react';\nimport { getRandomIntInclusive, sum } from '../common';\nimport { GameView, StreakContainer, PlayActionBar } from './GameComponents';\nimport './Game.css';\n\nconst cleanState = {\n  round: 0,\n  history: [],\n  diceValue: 4,\n  takeHome: false,\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = cleanState;\n  }\n\n  newGame() {\n    this.setState(cleanState);\n  }\n\n  isGameOver() {\n    const { round, diceValue } = this.state;\n    return round > 0 && diceValue === 1;\n  }\n\n  inProgress() {\n    const { round } = this.state;\n    return round > 0;\n  }\n\n  hasWon() {\n    return this.state.takeHome;\n  }\n\n  rollDice() {\n    return getRandomIntInclusive(1, 6);\n  }\n\n  handleRoll = () => {\n    if (this.isGameOver()) {\n      console.info('The game is over! Please start over.')\n      return;\n    }\n\n    const diceValue = this.rollDice();\n    const history = this.state.history.concat([diceValue]);\n    this.setState({\n      round: this.state.round + 1,\n      history: history,\n      diceValue: diceValue,\n    });\n  }\n\n  handleNew = () => {\n    this.newGame();\n  }\n\n  handleTakeHome = () => {\n    this.setState({\n      takeHome: true,\n    });\n  }\n\n  render() {\n    const { \n      history,\n      diceValue,\n    } = this.state;\n    const gameOver = this.isGameOver();\n    const inProgress = this.inProgress();\n    const hasWon = this.hasWon();\n    const winSum = sum(history);\n\n    return (\n      <div>\n        <GameView\n          onRoll={this.handleRoll}\n          value={diceValue}\n          inProgress={inProgress}\n          hasWon={hasWon}\n          gameOver={gameOver}\n          winSum={winSum}\n        />\n        <StreakContainer\n          winSum={winSum}\n          hasWon={hasWon}\n          gameOver={gameOver}\n          history={history}\n        />\n        <PlayActionBar\n          gameOver={gameOver}\n          inProgress={inProgress}\n          hasWon={hasWon}\n          onRoll={this.handleRoll}\n          onTakeHome={this.handleTakeHome}\n          onNew={this.handleNew}\n         />\n         <div className=\"ps-action-bar-padding\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport classNames from 'classnames';\n\n\nfunction SimActionBar(props) {\n  const {\n    running,\n    paused,\n    completed,\n  } = props;\n\n  const inProgress = running || paused;\n\n  const stopButton = (\n    <button className=\"button is-danger\" onClick={props.onStop}\n      disabled={!inProgress}>\n      <span roll=\"img\" aria-label=\"Stop\">&#x23F9;</span>&nbsp;\n      Stop\n    </button>\n  );\n\n  const newButton = (\n    <button className=\"button is-light\" onClick={props.onNew}>\n      <span roll=\"img\" aria-label=\"Renew\">&#x1F504;</span>&nbsp;\n      New\n    </button>\n  );\n\n  const playPauseClasses = classNames({\n    'button': true,\n    'is-primary': !running,\n    'is-warning': running && !completed,\n  });\n\n  return (\n    <div className=\"ps-container ps-center ps-action-bar\">\n      <div className=\"buttons ps-buttons-box\">\n          <button className={playPauseClasses} onClick={props.onPlay}\n            disabled={completed}>\n            Run\n            &nbsp;<span roll=\"img\" aria-label=\"Play or pause\">&#x23EF;</span>&nbsp;\n            Pause\n          </button>\n          {completed ? newButton : stopButton}\n      </div>\n    </div>\n  );\n}\n\nexport default SimActionBar;","import React from 'react';\n\nfunction SimForm(props) {\n    const { \n      simAmount,\n      activeStrat,\n      stratAVal,\n      stratBVal,\n      onSelectChange,\n      onRadioChange,\n      onValueChange,\n    } = props;\n  \n  const simAmountOptions = [\n    { n: 100, text: '100'},\n    { n: 1000, text: '1k'},\n    { n: 10000, text: '10k'},\n    // { n: 100000, text: '100k'},\n    // { n: 1000000, text: '1 million'},\n    // { n: 10000000, text: '10 million'},\n    // { n: 100000000, text: '100 million'},\n  ]\n\n  const stratAName = 'stratA';\n  const stratBName = 'stratB';\n  \n  return (\n    <form className=\"ps-sim-form\">\n      <div className=\"ps-inline-field ps-strat-field\">\n        <label className=\"ps-inline-label\">Simulate</label>\n        <div className=\"select\">\n          <select value={simAmount} onChange={onSelectChange}>\n            {simAmountOptions.map((amount, i) => {\n              return <option key={i} value={amount.n}>{`${amount.text} times`}</option>\n            })}\n          </select>\n        </div>\n      </div>\n      <div className=\"ps-strat-field\">\n        <div className=\"ps-inline-field\">\n          <label className=\"ps-inline-label\">\n            <input type=\"radio\" className=\"ps-strat-radio\" onChange={onRadioChange}\n              name=\"Strategy A\" value={stratAName} checked={activeStrat === stratAName} />\n            Strategy A\n          </label>\n          <input\n            name={stratAName}\n            value={stratAVal}\n            onChange={onValueChange}\n            className=\"input ps-strat-input\"\n          />\n        </div>\n        <p className=\"ps-strat-desc\">Quit after tentative winnings are ${stratAVal} or greater.</p>\n      </div>\n      <div className=\"ps-strat-field\">\n        <div className=\"ps-inline-field\">\n          <label className=\"ps-inline-label\">\n            <input type=\"radio\" className=\"ps-strat-radio\" onChange={onRadioChange}\n              name=\"Strategy B\" value=\"stratB\" checked={activeStrat === 'stratB'} />\n            Strategy B\n          </label>\n          <input\n            name={stratBName}\n            value={stratBVal}\n            onChange={onValueChange}\n            className=\"input ps-strat-input\"\n          />\n        </div>\n        <p className=\"ps-strat-desc\">Quit after {stratBVal} successful rolls.</p>\n      </div>\n    </form>\n  );\n}\n\nexport default SimForm;","import React from 'react';\n\nfunction SimResult(props) {\n  const {\n    activeStrat,\n    stratValue,\n    completed,\n    avgStreak,\n    avgWinnings,\n    bestStreak,\n    bestWinnings,\n  } = props;\n\n  let roundedAvgStreak;\n  let roundedAvgWinnings;\n  if (completed) {\n    roundedAvgStreak = avgStreak.toFixed(2);\n    roundedAvgWinnings = avgWinnings.toFixed(2);\n  }\n\n  const chosenStrats = {\n    stratA: <p>Quit after tentative winnings are ${stratValue} or greater.</p>,\n    stratB: <p>Quit after {stratValue} successful rolls.</p>,\n  }\n\n  return (\n    <div>\n      <div className=\"ps-container ps-center\">\n        <table className=\"table is-bordered\">\n          <thead>\n            <tr>\n              <th className=\"has-text-info\">Result</th>\n              <th>Streak</th>\n              <th>Winnings</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>Avg.</th>\n              <td>{roundedAvgStreak}</td>\n              <td>${roundedAvgWinnings}</td>\n            </tr>\n            <tr>\n              <th>Best</th>\n              <td>{bestStreak}</td>\n              <td>${bestWinnings}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <br />\n      <h3 className=\"is-size-5 has-text-weight-semibold\">Chosen Strategy</h3>\n      {chosenStrats[activeStrat]}\n    </div>\n  );\n}\n\nexport default SimResult;","import { getRandomIntInclusive } from '../common';\n\nclass PigletGame {\n  constructor() {\n    this.money_bag = 0;\n    this.round = 0;\n    this.winningStreak = 0;\n    this.over = false;\n  }\n\n  roll() {\n    if (this.over) {\n      throw new Error('Cannot roll when the game is already over.');\n    }\n    this.round++;\n    const diceValue = getRandomIntInclusive(1, 6);\n    if (diceValue > 1) {\n      this.winningStreak++;\n      this.money_bag += diceValue;\n    } else {\n      this.money_bag = 0;\n      this.over = true;\n    }\n  }\n\n  takeHome() {\n    if (this.over) {\n      throw new Error('Cannot takeHome when the game is already over.');\n    }\n    this.over = true;\n  }\n\n  get result() {\n    return {\n      streak: this.winningStreak,\n      winnings: this.money_bag,\n    }\n  }\n}\n\nclass StratOnRollCount {\n  constructor(count) {\n    this.count = count;\n  }\n\n  play() {\n    const game = new PigletGame();\n    while (!game.over) {\n      if (game.round >= this.count) {\n        game.takeHome();\n        break;\n      } else {\n        game.roll();\n      }\n    }\n    this.result = game.result;\n    return this;\n  }\n}\n\nclass StratOnWinnings {\n  constructor(amount) {\n    this.amount = amount;\n  }\n\n  play() {\n    const game = new PigletGame();\n    while (!game.over) {\n      if (game.money_bag >= this.amount) {\n        game.takeHome();\n        break;\n      } else {\n        game.roll();\n      }\n    }\n    this.result = game.result;\n    return this;\n  }\n}\n\nclass Sim {\n  constructor(simAmount, strategy, onUpdate) {\n    this.simAmount = simAmount;\n    this.strategy = strategy;\n    this.onUpdate = onUpdate;\n    this.reset();\n  }\n\n  run() {\n    this.timer = setInterval(() => {\n      if (++this.counter <= this.simAmount) {\n        // run the sim\n        this._runUpdate();\n      } else {\n        this._runComplete();\n      }\n    });\n  }\n\n  _runUpdate() {\n    const result = this.strategy.play().result;\n    const { winnings, streak } = result;\n    this.totalWinnings += winnings;\n    this.totalStreaks += streak;\n    this._setBestResults(winnings, streak);\n    this.onUpdate(this.counter, this.result.best);\n  }\n\n  _runComplete() {\n    clearInterval(this.timer);\n    const avgWinnings = this.totalWinnings / this.counter;\n    const avgStreaks = this.totalStreaks / this.counter;\n    this._setAvgResults(avgWinnings, avgStreaks);\n    this.onUpdate(\n      this.counter,\n      this.result.best,\n      this.result.avg,\n      true\n    );\n  }\n\n  pause() {\n    clearInterval(this.timer);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n    this.reset();\n  }\n\n  _setAvgResults(avgWinnings, avgStreaks) {\n    this.result.avg = {\n      streak: avgStreaks,\n      winnings: avgWinnings,\n    };\n  }\n\n  _setBestResults(winnings, streak) {\n    const { best } = this.result;\n    best.winnings = Math.max(best.winnings, winnings);\n    best.streak = Math.max(best.streak, streak);\n  }\n\n  reset() {\n    this.counter = 0;\n    this.totalWinnings = 0;\n    this.totalStreaks = 0;\n    this.result = {\n      avg: { \n        streak: null,\n        winnings: null,\n      },\n      best: {\n        streak: null,\n        winnings: null,\n      },\n    };\n  }\n}\n\nexport default Sim;\n\nexport {\n  StratOnRollCount,\n  StratOnWinnings,\n}","import React, { Component } from 'react';\nimport SimActionBar from './SimActionBar';\nimport SimForm from './SimForm';\nimport SimResult from './SimResult';\nimport Sim, { StratOnRollCount, StratOnWinnings } from './Sim';\nimport classNames from 'classnames';\nimport './Simulator.css';\n\nclass Simulator extends Component {\n  constructor(props) {\n    super(props);\n    this.strategyOptions = {\n      stratA: StratOnWinnings,\n      stratB: StratOnRollCount,\n    }\n    this.state = {\n      simAmount: 100,\n      activeStrat: 'stratA',\n      stratA: {\n        value: 10,\n      },\n      stratB: {\n        value: 5,\n      },\n      running: false,\n      paused: false,\n      completed: false,\n      progressValue: 0,\n    };\n  }\n\n  onSimUpdate = (counter, best, avg, completed) => {\n    const { simAmount } = this.state;\n    const progressValue = (counter / simAmount) * 100;\n    this.setState({\n      progressValue: progressValue,\n      bestStreak: best.streak,\n      bestWinnings: best.winnings,\n    });\n    if (completed) {\n      this.setState({\n        avgStreak: avg.streak,\n        avgWinnings: avg.winnings,\n        running: false,\n        completed: true,\n      });\n    }\n  }\n\n  handlePlayPause = () => {\n    // setup simulation for the first time Play is clicked\n    if (!this.simulation) {\n      const { activeStrat, simAmount } = this.state;\n      const chosenStrategy = this.strategyOptions[activeStrat];\n      const strategy = new chosenStrategy(this.state[activeStrat].value);\n      this.simulation = new Sim(simAmount, strategy, this.onSimUpdate);\n    }\n\n    const { running } = this.state;\n    if (!running) {\n      this.simulation.run();\n      this.setState({\n        running: true,\n        paused: false,\n      });\n    } else {\n      this.simulation.pause();\n      this.setState({\n        running: false,\n        paused: true,\n      });\n    }\n  }\n\n  _setNewSim() {\n    this.simulation = null;\n    this.setState({\n      running: false,\n      paused: false,\n      completed: false,\n      progressValue: 0,\n    });\n  }\n\n  handleStop = () => {\n    if (!this.simulation) {\n      // \"Stop\" is disabled if there's no simulation\n      // aka !this.state.running\n      return;\n    }\n    this.simulation.stop();\n    this._setNewSim();\n  }\n\n  handleNew = () => {\n    this._setNewSim();\n  }\n\n  handleAmountSelect = (e) => {\n    this.setState({simAmount: e.target.value});\n  }\n\n  handleStratSelect = (e) => {\n    this.setState({activeStrat: e.target.value});\n  }\n\n  handleStratValChange = (e) => {\n    const { name, value } = e.target;\n    const n = Math.floor(Math.abs(value));\n    this.setState({\n      [name]: {\n        value: n,\n      }\n    });\n  }\n\n  render() {\n    const { \n      simAmount,\n      activeStrat,\n      stratA,\n      stratB,\n      running,\n      paused,\n      completed,\n      progressValue,\n      avgStreak,\n      avgWinnings,\n      bestStreak,\n      bestWinnings,\n    } = this.state;\n\n    const simForm = (\n      <SimForm\n        simAmount={simAmount}\n        activeStrat={activeStrat}\n        stratAVal={stratA.value}\n        stratBVal={stratB.value}\n        onSelectChange={this.handleAmountSelect}\n        onRadioChange={this.handleStratSelect}\n        onValueChange={this.handleStratValChange}\n      />\n    );\n\n    const simResult = (\n      <SimResult\n        activeStrat={activeStrat}\n        stratValue={this.state[activeStrat].value}\n        completed={completed}\n        avgStreak={avgStreak}\n        avgWinnings={avgWinnings}\n        bestStreak={bestStreak}\n        bestWinnings={bestWinnings}\n      />\n    );\n    \n    return (\n      <div>\n        <div className=\"ps-margin\">\n          <SimProgress\n            value={progressValue}\n            completed={completed}\n           />\n          {(running || paused || completed)\n            ? simResult\n            : simForm}\n        </div>\n        <SimActionBar\n          running={running}\n          paused={paused}\n          completed={completed}\n          onPlay={this.handlePlayPause}\n          onStop={this.handleStop}\n          onNew={this.handleNew}\n         />\n        <div className=\"ps-action-bar-padding\"></div>\n      </div>\n    );\n  }\n}\n\nfunction SimProgress(props) {\n  const { completed } = props;\n  const classes = classNames({\n    'progress': true,\n    'is-info': !completed,\n    'is-success': completed,\n  })\n  \n  return (\n    <div className=\"columns is-centered\">\n      <div className=\"column is-two-thirds\">\n        <progress className={classes} value={props.value} max=\"100\">45%</progress>\n      </div>\n    </div>\n  );\n}\n\nexport default Simulator;","// https://create-react-app.dev/docs/importing-a-component\nimport React, { Component } from 'react';\nimport Game from './Game/Game';\nimport Simulator from './Simulator/Simulator';\nimport './App.css';\nimport classNames from 'classnames';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabIndex: 0,\n    };\n  }\n\n  handleTabClick = (tabIndex) => {\n    this.setState({\n      tabIndex: tabIndex\n    });\n  }\n\n  renderTabPage() {\n    let page;\n    const { tabIndex } = this.state;\n    switch (tabIndex) {\n      case 1:\n        page = <Simulator />;\n        break;\n      case 2:\n        page = <Explain />;\n        break;\n      default:\n        page = <Game />;\n    }\n    return page;\n  }\n\n  render() {\n    const { \n      tabIndex,\n    } = this.state;\n    \n    const tabs = [\n      'Play',\n      'Simulate',\n      'Explain',\n      // 'Leaderboard', // would be too easy to hack\n    ];\n\n    return (\n      <div className=\"App\">\n        <section className=\"section\">\n          <div className=\"container\">\n            <h1 className=\"title\">Piglet Sim</h1>\n            <h2 className=\"subtitle\">What's the best strategy?</h2>\n          </div>\n        </section>\n        <TabNav\n          tabs={tabs}\n          activeIndex={tabIndex}\n          onTabClick={this.handleTabClick}\n         />\n         {this.renderTabPage()}\n      </div>\n    );\n  }\n}\n\nfunction Explain(props) {\n  return (\n    <div>\n      <div className=\"ps-margin\">\n        <div className=\"columns\">\n          <div className=\"column content\">\n            <h3>Game Rules</h3>\n            <p>You start with no money in the money bag, and on every turn you have two choices: quit and take home your winnings, or risk everything in the money bag and roll a die.</p>\n            <p>If the die lands on 1, you lose all the money in your money bag, but if the die lands on anything else, you add the value in dollars to your money bag..</p>\n            <h3>Think</h3>\n            <p>What would be the optimal strategy for making the most money on average?</p>\n          </div>\n        </div>\n      </div>\n      <footer class=\"footer\">\n        <div class=\"content has-text-centered\">\n          <p>\n            Made by <a href=\"https://slevin.im\">Slevin Zhang</a>.\n            <br />\n            The source code is on <a href=\"https://github.com/s7evinz/piglet-sim\">GitHub</a>.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nfunction TabNav(props) {\n  const {\n    tabs,\n    activeIndex,\n  } = props;\n  \n  return (\n    <div className=\"tabs is-centered\">\n      <ul>\n        {tabs.map((name, i) => {\n          const isActive = classNames({'is-active': i === activeIndex});\n          return (\n            <li key={i} className={isActive} onClick={props.onTabClick.bind(this, i)}>\n              <a>{name}</a>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bulma/css/bulma.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}